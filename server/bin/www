#!/usr/bin/env node

const debug = require('debug')('sendit:httpServer');
const http = require('http');
const { bootstrap } = require('../build/server');

/**
 * Normalize a port into a number, string, or false.
 * @function normalizePort
 * @param {port} val - the port
 * @returns {string |number | boolean} returns the normalized port
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// create http server
const httpPort = normalizePort(process.env.PORT || 8080);
const { app } = bootstrap(debug);
app.set('port', httpPort);
const httpServer = http.createServer(app);

/**
 * @function onListening
 * @returns {null} No return
 */
function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Event listener for HTTP server "error" event.
 * @function onError
 * @param {object} error - The error
 * @throws {error} Throws an error
 * @returns {null} No return
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof httpPort === 'string'
    ? `Pipe ${httpPort}`
    : `Port ${httpPort}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}


// listen on provided ports
httpServer.listen(httpPort);

// add error handler
httpServer.on('error', onError);

// start listening on port
httpServer.on('listening', onListening);
